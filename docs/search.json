[{"path":"https://DISSC-yale.github.io/pophive_demo/articles/standards.html","id":"naming","dir":"Articles","previous_headings":"","what":"Naming","title":"Standards","text":"general guidelines naming files: use portable characters: Best stick -z0-9_-, certainly never use :. Keep names short: total path length limit Windows, avoid long files names especially deeply nested within directories. Avoid duplicating information path (e.g., instead category/category_data.csv use category/data.csv). Avoid new files: file represents thing (e.g., result download given source), keep name, opposed dates version numbers appended name. New versions files overwrite previous versions, potentially merged, deepening data source. Versions files retained git tree, rather separate files. similar considerations naming variables: Best stick limited set characters (-z0-9_). Keep lengths minimal, still identifiable – able tell variable means name, complete information stored measure info entry. instance, include subset value-related information multiple variants (e.g., value_count value_percent). Make names unique across source projects. means including enough relevant source information. source may implicitly include information value, kept name, made explicit measure info.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/articles/standards.html","id":"compression","dir":"Articles","previous_headings":"","what":"Compression","title":"Standards","text":"Almost data files can compressed compressed. main reason compress file meant viewing, rather read . Gzip portable type compression, files gzip-compressed can read URL, rather needing downloaded read separately. makes gzip good standard output files. LZMA (xz) generally results smaller files, may best raw files. Parquet files default snappy compression, can also use gzip. Gzip generally results smaller files, slightly less readily usable browsers, may best use snappy files meant web, use gzip otherwise. vroom package, among others, automatically compresses writing, decompresses reading, based file name: standard functions (like read.csv) now automatically decompress, automatically compress, connection must used writing: function doesn’t automatically handle compression extensions, accept connection, can use gzfile function across compression types read:","code":"data <- vroom::vroom(\"data.csv.xz\") vroom::vroom_write(data, \"data.csv.xz\", \",\") data <- read.csv(\"data.csv.xz\") write.csv(data, xzfile(\"data.csv.xz\"), row.names = FALSE) data <- arrow::read_csv_arrow(gzfile(\"data.csv.xz\"))"},{"path":"https://DISSC-yale.github.io/pophive_demo/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yale School Public Health. Funder, copyright holder. Micah Iserman. Maintainer, author.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Iserman M (2025). pophive: PopHIVE: Population Health Information Visualization Exchange. R package version 0.1.0, https://DISSC-yale.github.io/pophive_demo.","code":"@Manual{,   title = {pophive: PopHIVE: Population Health Information and Visualization Exchange},   author = {Micah Iserman},   year = {2025},   note = {R package version 0.1.0},   url = {https://DISSC-yale.github.io/pophive_demo}, }"},{"path":"https://DISSC-yale.github.io/pophive_demo/index.html","id":"population-health-information-and-visualization-exchange","dir":"","previous_headings":"","what":"PopHIVE: Population Health Information and Visualization Exchange","title":"PopHIVE: Population Health Information and Visualization Exchange","text":"R package establish work within data collection framework.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"PopHIVE: Population Health Information and Visualization Exchange","text":"","code":"# install.packages(\"remotes\") remotes::install_github(\"dissc-yale/pophive_demo\")"},{"path":"https://DISSC-yale.github.io/pophive_demo/index.html","id":"data-collection","dir":"","previous_headings":"","what":"Data Collection","title":"PopHIVE: Population Health Information and Visualization Exchange","text":"data directory contains source projects, initialized pophive_add_source function: source project includes ingest.R script, download data source project’s raw directory possible, ultimately add data source project’s standard directory. Data files standard directory mixed, tabular format, meaning locations times potentially repeated across rows, variables, including subsets, spread across columns: data file standard directory include two standard columns: geography: sort location ID, ideally form GEOID (e.g., c(\"10\", \"10100\")). time: sort time, ideally format YYYY-MM-DD HH:MM:SS (e.g., c(\"2020\", \"2020-01-01\")). ID columns ideally hierarchical, sub-parts meaning levels. instance, first 2 characters identify state, first 5 uniquely identify county. Additional columns treated values interest, documented measure_info.json file.","code":"pophive_add_source(\"new_source\") geography time       value_total value_partial 10        2020       10          2.34 10100     2020-01-01 20          2.44"},{"path":"https://DISSC-yale.github.io/pophive_demo/index.html","id":"processing-and-checking","dir":"","previous_headings":"Data Collection","what":"Processing and Checking","title":"PopHIVE: Population Health Information and Visualization Exchange","text":"pophive_process function executes ingest.R file within source project, creates / updates standard/datapackage.json file base data found standard directory. pophive_check_source function runs checks standard data measure info within source project:","code":"pophive_process(\"new_source\") pophive_check_source(\"new_source\")"},{"path":"https://DISSC-yale.github.io/pophive_demo/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"PopHIVE: Population Health Information and Visualization Exchange","text":"data PopHIVE statistical outputs provided “”, without warranty kind, express implied, including limited warranties merchantability, fitness particular purpose, noninfringement. event shall authors, contributors, copyright holders liable claim, damages, liability, whether action contract, tort, otherwise, arising , , connection data use dealings data. PopHIVE statistical outputs research tools intended use fields public health medicine. intended clinical decision making, intended used diagnosis treatment patients may useful appropriate clinical purpose. Users PopHIVE statistical outputs aware responsibilities ensure ethical appropriate use technology, including adherence applicable legal regulatory requirements. content data provided statistical outputs replace expertise healthcare professionals. Healthcare professionals use professional judgment evaluating outputs PopHIVE statistical outputs.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 pophive authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive-package.html","id":null,"dir":"Reference","previous_headings":"","what":"pophive: PopHIVE: Population Health Information and Visualization Exchange — pophive-package","title":"pophive: PopHIVE: Population Health Information and Visualization Exchange — pophive-package","text":"Collection use population health data.","code":""},{"path":[]},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pophive: PopHIVE: Population Health Information and Visualization Exchange — pophive-package","text":"Maintainer: Micah Iserman micah.iserman@gmail.com contributors: Yale School Public Health [funder, copyright holder]","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_add_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a source project structure — pophive_add_source","title":"Adds a source project structure — pophive_add_source","text":"Establishes new data source project, used collect prepare data new source.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_add_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a source project structure — pophive_add_source","text":"","code":"pophive_add_source(name, base_dir = \"data\", open_after = interactive())"},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_add_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a source project structure — pophive_add_source","text":"name Name source. base_dir Path directory containing sources. open_after Logical; FALSE, open project.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_add_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a source project structure — pophive_add_source","text":"Nothing; creates default files directories.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_add_source.html","id":"project","dir":"Reference","previous_headings":"","what":"Project","title":"Adds a source project structure — pophive_add_source","text":"Within source project, two files edits: ingest.R: primary script, automatically rerun.     store raw data resources raw/ possible,     use raw/ produce standard-format files standard/.     file sourced location processing, system paths     must relative . measure_info.json: can record information     variables included standardized data files.     See data_measure_info.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_add_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a source project structure — pophive_add_source","text":"","code":"data_source_dir <- tempdir() pophive_add_source(\"source_name\", data_source_dir) list.files(paste0(data_source_dir, \"/source_name\")) #> [1] \"README.md\"         \"ingest.R\"          \"measure_info.json\" #> [4] \"project.Rproj\"     \"raw\"               \"standard\""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_check_sources.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Data Sources — pophive_check_sources","title":"Check Data Sources — pophive_check_sources","text":"Check data files measure info source projects.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_check_sources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Data Sources — pophive_check_sources","text":"","code":"pophive_check_sources(   names = list.dirs(\"data\", recursive = FALSE, full.names = FALSE),   source_dir = \"data\",   verbose = TRUE )"},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_check_sources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Data Sources — pophive_check_sources","text":"names Name names source projects. source_dir Path directory containing source projects. verbose Logical; FALSE, print status messages.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_check_sources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Data Sources — pophive_check_sources","text":"list entry source, containing character vector   including issue codes: not_compressed: file appear compressed. cant_read: Failed read file . geography_missing: File contain geography column. geography_nas: file's geography column contains NAs. time_missing: File contain time column. time_nas: file's time column contains NAs. missing_info: {column_name}: file's indicated column     matching entry measure_info.json.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_check_sources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Data Sources — pophive_check_sources","text":"","code":"if (FALSE) { # \\dontrun{   pophive_check_sources(\"gtrends\") } # }"},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_download_cdc.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Data from the CDC — pophive_download_cdc","title":"Download Data from the CDC — pophive_download_cdc","text":"Download data metadata Centers Disease Control Prevention (CDC).","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_download_cdc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Data from the CDC — pophive_download_cdc","text":"","code":"pophive_download_cdc(id, out_dir = \"raw\", verbose = TRUE)"},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_download_cdc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Data from the CDC — pophive_download_cdc","text":"id ID resource (e.g., ijqb-a7ye). out_dir Directory save metadata data files. verbose Logical; FALSE, display status messages.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_download_cdc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Data from the CDC — pophive_download_cdc","text":"Nothing; downloads files (<id>.json <id>.csv.xz) out_dir","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_download_cdc.html","id":"data-cdc-gov-urls","dir":"Reference","previous_headings":"","what":"data.cdc.gov URLs","title":"Download Data from the CDC — pophive_download_cdc","text":"resource ID, 3 relevant CDC URLs: resource/<id>: redirects resource's main page,     displayed metadata data preview     (e.g., data.cdc.gov/resource/ijqb-a7ye). api/views/<id>: direct link underlying     JSON metadata (e.g., data.cdc.gov/api/views/ijqb-a7ye). api/views/<id>/rows.csv: direct link full     CSV dataset (e.g., data.cdc.gov/api/views/ijqb-a7ye/rows.csv).","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_download_cdc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Data from the CDC — pophive_download_cdc","text":"","code":"if (FALSE) { # \\dontrun{   pophive_download_cdc(\"ijqb-a7ye\") } # }"},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_get_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve A Data File — pophive_get_file","title":"Retrieve A Data File — pophive_get_file","text":"Load data file source data project, list versions file.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_get_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve A Data File — pophive_get_file","text":"","code":"pophive_get_file(path, date = NULL, commit_hash = NULL, versions = FALSE)"},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_get_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve A Data File — pophive_get_file","text":"path Path file. date Date version load; Date, character format YYYY-MM-DD. match nearest version. commit_hash SHA signature committed version; can first 6 characters. Ignored date provided. versions Logical; TRUE, return list available version, rather ","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_get_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve A Data File — pophive_get_file","text":"versions TRUE, data.frame columns   hash, author, date, message commit.   Otherwise, path temporary file, one extracted.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_get_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve A Data File — pophive_get_file","text":"","code":"path <- \"../../data/wastewater/raw/flua.csv.xz\" if (file.exists(path)) {   # list versions   versions <- pophive_get_file(path, versions = TRUE)   print(versions[, c(\"date\", \"hash\")])    # extract a version to a temporary file   temp_path <- pophive_get_file(path, \"2025-05\")   basename(temp_path) } #>                             date                                     hash #> 1  Mon Jun 9 00:36:37 2025 +0000 d978116e3b12926798d8f573bc1d3e913d67a547 #> 2  Mon Jun 2 09:32:13 2025 +0000 784558d5a95e20f3950a36770f82a5a0fabebb21 #> 3 Tue May 27 13:56:02 2025 -0400 36914a3d9b47f91eba0b5d8dfddd357a700fd525 #> [1] \"flua-d97811.csv.xz\""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_load_census.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Census Population Data — pophive_load_census","title":"Download Census Population Data — pophive_load_census","text":"Download American Community Survey population data U.S. Census Bureau.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_load_census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Census Population Data — pophive_load_census","text":"","code":"pophive_load_census(   year = 2021,   out_dir = NULL,   state_only = FALSE,   overwrite = FALSE,   verbose = TRUE )"},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_load_census.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Census Population Data — pophive_load_census","text":"year Data year. out_dir Directory download file . state_only Logical; TRUE, load state data. still download county data. overwrite Logical; TRUE, re-download overwrite existing data. verbose Logical; FALSE, display status messages.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_load_census.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Census Population Data — pophive_load_census","text":"data.frame including GEOID region_name   states counties, along population, total within   age brackets.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_load_census.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Census Population Data — pophive_load_census","text":"","code":"if (file.exists(\"../../resources/census_population_2021.csv.xz\")) {   pophive_load_census(2021, \"../../resources\")[1:10, ] } #> ℹ reading in existing file #> ✔ reading in existing file [151ms] #>  #>    GEOID          region_name    Total <10 Years 10-14 Years 15-19 Years #> 1     01              Alabama  4997675    597446      329794      329732 #> 2     02               Alaska   735951    104061       49647       47081 #> 3     04              Arizona  7079203    852827      480043      476470 #> 4     05             Arkansas  3006309    380228      203248      203530 #> 5     06           California 39455353   4784448     2658361     2588625 #> 6     08             Colorado  5723176    671899      370266      369984 #> 7     09          Connecticut  3605330    378662      224371      245790 #> 8     10             Delaware   981892    110715       60792       61884 #> 9     11 District of Columbia   683154     78027       31449       36641 #> 10    12              Florida 21339762   2266695     1252281     1227017 #>    20-39 Years 40-64 Years 65+ Years #> 1      1283943     1612333    844427 #> 2       219748      225226     90188 #> 3      1896688     2129316   1243859 #> 4       779856      934086    505361 #> 5     11341150    12412890   5669879 #> 6      1685156     1806617    819254 #> 7       910996     1225332    620179 #> 8       245190      316936    186375 #> 9       265876      187962     83199 #> 10     5318262     6928542   4346965"},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_process.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Data Sources — pophive_process","title":"Run Data Sources — pophive_process","text":"Optionally run ingestion script data source, collect metadata.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Data Sources — pophive_process","text":"","code":"pophive_process(name = NULL, source_dir = \"data\", ingest = TRUE)"},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Data Sources — pophive_process","text":"name Name source project process. source_dir Path directory containing source projects. ingest Logical; FALSE, re-process standardized data without running ingestion scripts.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Data Sources — pophive_process","text":"list processing results: timings: many seconds ingestion script took run. logs: captured output ingestion script. entry entry source. `datapackage.json` file also created / update source's `standard` directory.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Data Sources — pophive_process","text":"","code":"if (FALSE) { # \\dontrun{   # run from a directory containing a `data` directory containing the source   pophive_process(\"source_name\")    # run without executing the ingestion script   pophive_process(\"source_name\", ingest = FALSE) } # }"},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_process_epic_staging.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Epic Stating Files — pophive_process_epic_staging","title":"Process Epic Stating Files — pophive_process_epic_staging","text":"Process Epic stating files, lightly standardizing moving raw.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_process_epic_staging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Epic Stating Files — pophive_process_epic_staging","text":"","code":"pophive_process_epic_staging(   staging_dir = \"raw/staging\",   out_dir = \"raw\",   verbose = TRUE,   cleanup = TRUE )"},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_process_epic_staging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Epic Stating Files — pophive_process_epic_staging","text":"staging_dir Directory containing staging files. out_dir Directory write new raw files . verbose Logical; FALSE, show status messages. cleanup Logical; FALSE, remove staging files processed.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_process_epic_staging.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Epic Stating Files — pophive_process_epic_staging","text":"NULL staging files found.   Otherwise, list entries data metadata.   lists entries recognized standard name,   potentially combined outputs similar pophive_read_epic","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_process_epic_staging.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Epic Stating Files — pophive_process_epic_staging","text":"","code":"if (FALSE) { # \\dontrun{   # run from a source project   pophive_process_epic_staging() } # }"},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_read_epic.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Epic Cosmos Data — pophive_read_epic","title":"Read Epic Cosmos Data — pophive_read_epic","text":"Read metadata data Epic Cosmos file.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_read_epic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Epic Cosmos Data — pophive_read_epic","text":"","code":"pophive_read_epic(path, path_root = \".\")"},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_read_epic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Epic Cosmos Data — pophive_read_epic","text":"path Path file. path_root Directory containing path, full.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_read_epic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Epic Cosmos Data — pophive_read_epic","text":"list data.frame entries metadata data.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_read_epic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Epic Cosmos Data — pophive_read_epic","text":"","code":"# write an example file path <- tempfile(fileext = \".csv\") raw_lines <- c(   \"metadata field,metadata value,\",   \",,\",   \",Measures,Value Name\",   \"Year,Measure 1,\",   \"2020,m1,1\",   \",m2,2\",   \"2021,m1,3\",   \",m2,4\" ) writeLines(raw_lines, path)  # read it in pophive_read_epic(basename(path), dirname(path)) #> $metadata #> $metadata$file #> [1] \"file2d5836bb16e6.csv\" #>  #> $metadata$md5 #> [1] \"7abcea997e7630c84a12284d5abc2b97\" #>  #> $metadata$date_processed #> [1] \"2025-06-20 14:45:29 EDT\" #>  #> $metadata$standard_name #> [1] \"\" #>  #> $metadata$`metadata field` #> [1] \"metadata value\" #>  #>  #> $data #> # A tibble: 4 × 3 #>    year measure_1 value_name #>   <int> <chr>          <int> #> 1  2020 m1                 1 #> 2  2020 m2                 2 #> 3  2021 m1                 3 #> 4  2021 m2                 4 #>"},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_to_health_region.html","id":null,"dir":"Reference","previous_headings":"","what":"Map States to Health Regions — pophive_to_health_region","title":"Map States to Health Regions — pophive_to_health_region","text":"Maps state FIPS state numeric codes Human Health Service regions.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_to_health_region.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map States to Health Regions — pophive_to_health_region","text":"","code":"pophive_to_health_region(geoids, prefix = \"Region \")"},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_to_health_region.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map States to Health Regions — pophive_to_health_region","text":"geoids Character vector GEOIDs. prefix prefix add region IDs.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_to_health_region.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map States to Health Regions — pophive_to_health_region","text":"vector Health Region names length geoids.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_to_health_region.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map States to Health Regions — pophive_to_health_region","text":"","code":"pophive_to_health_region(c(\"01\", \"01001\", \"02\", \"02001\")) #> [1] \"Region 4\"  \"Region 4\"  \"Region 10\" \"Region 10\""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_update_manifest.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a source project structure — pophive_update_manifest","title":"Adds a source project structure — pophive_update_manifest","text":"Adds source project structure","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_update_manifest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a source project structure — pophive_update_manifest","text":"","code":"pophive_update_manifest(path, url = NULL, description = NULL)"},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_update_manifest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a source project structure — pophive_update_manifest","text":"path Path file record state . url URL file originally downloaded . description High-level description file, add metadata entry.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_update_manifest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a source project structure — pophive_update_manifest","text":"List file metadata, also added manifest.json file: url URL file. description Provided description. time Time downloaded; YYYY-MM-DD HH:MM:SS TZ bytes Size file bytes. md5 MD5 hash file.","code":""},{"path":"https://DISSC-yale.github.io/pophive_demo/reference/pophive_update_manifest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a source project structure — pophive_update_manifest","text":"","code":"if (dir.exists(\"../data\")) {   # download the file   url <- paste0(     \"https://raw.githubusercontent.com/DISSC-yale/gtrends_collection/\",     \"refs/heads/main/data/term%3D%252Fg%252F11j30ybfx6/part-0.parquet\"   )   path <- tempfile(fileext = \".parquet\")   download.file(url, path, mode = \"wb\")    # add/update metadata in manifest.json   pophive_update_manifest(     path, url,     description = paste(       \"Google Trends data for the /g/11j30ybfx6\",       \"(Respiratory syncytial virus vaccine) topic.\"     )   ) }"}]
